<br>
<div class="layui-form">

    <div class="layui-form-item">

        <label class="layui-form-label">付款单号</label>
        <div class="layui-input-inline">
            <input type="text" name="id" lay-verify="" placeholder="请输订单号" autocomplete="off"
                   class="layui-input">
        </div>

        <label class="layui-form-label">发生单据负责人</label>
        <div class="layui-input-inline">
            <input type="text" name="changeUserName" lay-verify="" placeholder="请输发生单据负责人" autocomplete="off"
                   class="layui-input">
        </div>

        <label class="layui-form-label">支付状态</label>
        <div class="layui-input-inline">
            <select id="sto_department_select_zone" name="state">
                <option value="">所有</option>
                <option value="0">待支付</option>
                <option value="1">已支付</option>
            </select>
        </div>

        <label class="layui-form-label">付款类型</label>
        <div class="layui-input-inline">
            <select id="payment_type" name="type">
                <option value="">所有</option>
            </select>
        </div>
    </div>
    <div class="layui-form-item">
        <button class="layui-btn" lay-submit lay-filter="fin_pur_search">搜索</button>
        <button class="layui-btn" lay-submit lay-filter="fin_payment_reject">拒绝</button>
        <button class="layui-btn" lay-submit lay-filter="fin_payment_paid">付款</button>
        <button class="layui-btn" lay-submit lay-filter="fin_pur_export">导出</button>
        <button class="layui-btn" lay-submit lay-filter="fin_pur_stattis">显示统计信息</button>
    </div>
</div>
<table id="demo" lay-filter="fin_pur_tab"></table>

<script id="paymentTypeEnum" type="text/html">
    {{each payTypeEnum value index}}
    <option value="{{value.ordinal}}">{{value.display}}</option>
    {{/each}}
</script>

<script type="text/html" id="">
    {{d.wmsTypeEnum.display}}
</script>
<script type="text/html" id="paymentStateEnum">
    {{d.wmsStateEnum.display}}
</script>

<script type="text/html" id="fin_pur_option">
    <a class="layui-btn layui-btn-xs" lay-event="fin_pur_delete">删除</a>
    <a class="layui-btn layui-btn-xs" lay-event="fin_pur_detail">查看</a>
</script>

<script>
    var fin_pur_que_para = "", fin_pur_table;
    /*    var _query_id, sto_addWms_index;
        var sto_wms_edit_sel_data = null;*/
    layui.use(['layer', 'table', 'element', 'form'], function () {
        var layer = layui.layer;
        var index = layer.load(0, {time: 5 * 1000});
        var table = layui.table;
        var form = layui.form;
        form.render();
           $.ajax({
               type: 'GET',
               url: "/finance/common/enumList",
               dataType: 'json',
               data: '',
               success: function (res) {
                   console.log("请求枚举-下拉框数据", res);
                   state_response(res);
                   $("#payment_type").append(template('paymentTypeEnum', res.item));
                   form.render('select'); //刷新select选择框渲染
               }
           });

        //第一个实例
        fin_pur_table = table.render({
            elem: '#demo'
            , id: 'demo'
            , url: '/finance/payment/findList' //数据接口
            , method: 'post'
            , request: {
                pageName: 'page' //页码的参数名称，默认：page
                , limitName: 'limit' //每页数据量的参数名，默认：limit
            }
            , done: function (res, curr, count) {
                layer.close(index);
            }
            , response: {
                statusName: 'code' //数据状态的字段名称，默认：code
                , statusCode: 'OK' //成功的状态码，默认：0
                , msgName: 'desc' //状态信息的字段名称，默认：msg
                , countName: 'total' //数据总数的字段名称，默认：count
                , dataName: 'item' //数据列表的字段名称，默认：data
            }
            , page: true //开启分页
            , cols: [[ //表头
                {checkbox: true}
                , {field: 'id', title: '付款单号'}
                , {field: 'changeUserName', title: '发生单据负责人'}
                , {field: 'type', title: '付款类型'}
                , {field: 'state', title: '支付状态'}
                , {field: 'payUser', title: '支付人'}
                , {field: 'payTime', title: '支付时间'}
                , {field: 'amount', title: '本次支付金额'}
                , {field: '', title: '操作', templet: '#fin_pur_option', align: 'center', fixed: 'right', width: 200}
            ]]
        });

        //监听查询
        form.on('submit(fin_pur_search)', function (data) {
            fin_pur_que_para = data.field;
//            minCreateAt=
            //上述方法等价于
            table.reload('demo', {
                where: fin_pur_que_para    //设定异步数据接口的额外参数，任意设
                , page: {
                    offset: 1 //重新从第 1 页开始
                }
            });
            return false;
        });

        //拒绝
        form.on('submit(fin_payment_reject)', function (data) {
            console.log(JSON.stringify(data.field));
            var checkStatus = table.checkStatus('demo'); //test即为基础参数id对应的值
            console.log('checkStatus:' + JSON.stringify(checkStatus));
            var paymentIds = new Array();
            if (checkStatus.data.length) {
                var err = 0;
                $.each(checkStatus.data, function (i, n) {
                    if (n.payType==1) {
                        layer.msg('付款单：[' + n.id + ']已付款，不能再拒绝，请重新勾选', {icon: 3});
                        err++;
                    }
                    paymentIds.push(n.id);
                });
                if (err > 0) {
                    return false;
                }
                postAjaxBat('/finance/payment/refuse', {paymentIds:paymentIds});

            } else {
                layer.msg('请勾选要操作的行', {icon: 3});
            }
            return false;
        });

        //付款
        form.on('submit(fin_payment_paid)', function (data) {
            console.log(JSON.stringify(data.field));
            var checkStatus = table.checkStatus('demo'); //test即为基础参数id对应的值
            console.log('checkStatus:' + JSON.stringify(checkStatus));
            var paymentIds = new Array();
            if (checkStatus.data.length) {
                var err = 0;
                $.each(checkStatus.data, function (i, n) {
                    if (n.payType!=0) {
                        layer.msg('付款单：[' + n.id + ']状态不为待支付，不能进行付款，请重新勾选', {icon: 3});
                        err++;
                    }
                    paymentIds.push(n.id);
                });
                if (err > 0) {
                    return false;
                }
              /*  paymentIds.toString().replaceAll("[","").replaceAll("]","");*/
                postAjaxBat('/finance/payment/pay', {paymentIds:paymentIds});

            } else {
                layer.msg('请勾选要操作的行', {icon: 3});
            }
            return false;
        });

        //监听工具条
        table.on('tool(fin_pur_tab)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            var data = obj.data; //获得当前行数据
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            var tr = obj.tr; //获得当前行 tr 的DOM对象
            console.log('data:' + JSON.stringify(data));

            if (layEvent === 'fin_pur_detail') { // 查看详情
                fin_pay_item_data = data;
                $.get('view/finance/payableResult.html', function (str) {
                    var fin_pay_item_index = layer.open({
                        type: 1
                        , title: '详情信息'
                        , content: str //注意，如果str是object，那么需要字符拼接。
                        , maxmin: true
                        , area: '50%'
                    });
                });
            }else {
                if (data.payType==1) {
                    layer.msg('付款单：[' + n.id + ']已支付，不能删除', {icon: 3});
                }else {
                    postAjaxBat('/finance/payment/delete', {paymentId:data.id});
                }
            }
        });

        function postAjaxBat(url, data) {
            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
//                    contentType: 'application/json;charset=utf-8',
                traditional: true,
                data: data,
//                    data: JSON.stringify(req),
                success: function (res) {
                    console.log('...res:' + JSON.stringify(res));
                    state_response(res);
                    table.reload({
                        where: fin_pur_que_para
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    layer.msg('操作失败，请重试');
                }
            });
        }
    });
</script>

